parallel::stopCluster(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
setwd('C:/Users/nicoc/GIT/Creacion-De-Empresas')
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ ., data = data_train) %>%
step_rm(id)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10, -1, by = 1),
tree_depth = c(1, 10, by = 1),
min_n = c(20, 30, 40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
best_tree = cv_tree %>% select_best(metric='roc_auc')
help("metric_set")
cv_tree
datos
metrics = metric_set(mn_log_loss)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(mn_log_loss)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(mn_log_loss)
parallel::stopCluster(cl)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(mn_log_loss)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc)
parallel::stopCluster(cl)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ ., data = data_train) %>%
step_rm(id)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10, -1, by = 1),
tree_depth = c(1, 10, by = 1),
min_n = c(20, 30, 40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc)
parallel::stopCluster(cl)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ ., data = data_train) %>%
step_rm(id)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10, -1, by = 1),
tree_depth = c(1, 10, by = 1),
min_n = c(20, 30, 40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
datos = read.csv("UCI_Credit_Card.csv")
library(tidyverse)
library(tidymodels)
library(parallel)
library(doParallel)
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ ., data = data_train) %>%
step_rm(id)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10, -1, by = 1),
tree_depth = c(1, 10, by = 1),
min_n = c(20, 30, 40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
grid_tree
show_notes(.Last.tune.result)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
View(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ ., data = data_train) %>%
step_rm(ID)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
receta
View(datos)
receta = recipe(default ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE,
data = data_train) %>% step_rm(ID)
receta
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10, -1, by = 1),
tree_depth = c(1, 10, by = 1),
min_n = c(20, 30, 40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
show_notes(.Last.tune.result)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE,
data = data_train) %>% step_rm(ID)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
show_notes(.Last.tune.result)
View(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month) %>%
select(-c(ID))
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month) %>%
select(-c(ID))
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE)
) %>%
rename(default = default.payment.next.month) %>%
select(-c(ID))
View(datos)
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE,
data = data_train)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
show_notes(.Last.tune.result)
datos = datos %>% rename(default = default.payment.next.month) %>%
mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE),
default = as.factor(default)) %>%
select(-c(ID))
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% rename(default = default.payment.next.month) %>%
mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE),
default = as.factor(default)) %>%
select(-c(ID))
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE,
data = data_train)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
cv_tree
best_tree = cv_tree %>% best_tree("roc_auc")
best_tree = cv_tree %>% select_best("roc_auc")
best_tree
final_tree = workflow_tree_tune %>% finalize_workflow(best_tree)
tree_fit = final_tree %>% fit(data = data_train)
prediccion_test = predict(tree_fit, new_data = data_test)
prediccion_test
data_test$pred = prediccion_test
conf_mat(data_test, truth = default, estimate = pred)
prediccion_test
data_test$pred = as.factor(prediccion_test)
data_test$pred = as.factor(prediccion_test$.pred_class)
conf_mat(data_test, truth = default, estimate = pred)
best_tree = cv_tree %>% select_best("roc_auc")
best_tree
final_tree = workflow_tree_tune %>% finalize_workflow(best_tree)
tree_fit = final_tree %>% fit(data = data_train)
tree_fit
prediccion_test = predict(tree_fit, new_data = data_test)
prediccion_test
help(decision_tree)
sum(datos$default) / length(datos$default)
sum(as.interger(datos$default) / length(datos$default)
sum(as.interger(datos$default)) / length(datos$default)
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
sum(datos$default.payment.next.month) / length(datos$default.payment.next.month)
data_train$default
datos = datos %>% rename(default = default.payment.next.month) %>%
mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE),
default = as.factor(default)) %>%
select(-c(ID))
set.seed(42069)
data_test      =   data_split %>% testing()
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
data_train$default
table(data_train$default) / length(data_train$default)
table(data_test) / length(data_test$default)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
table(data_test$default) / length(data_test$default)
receta = recipe(default ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE,
data = data_train)
receta = recipe(default ~ .,
data = data_train)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
datos = read.csv("UCI_Credit_Card.csv")
str(datos)
datos = datos %>% rename(default = default.payment.next.month) %>%
mutate(SEX = as.factor(SEX),
EDUCATION = as.factor(EDUCATION),
MARRIAGE = as.factor(MARRIAGE),
default = as.factor(default)) %>%
select(-c(ID))
set.seed(42069)
data_split     =   initial_split(datos, prop = 0.80, strata = default)
data_train     =   data_split %>% training()
data_test      =   data_split %>% testing()
table(data_train$default) / length(data_train$default)
table(data_test$default) / length(data_test$default)
data_folds =  vfold_cv(data_train , v = 10)
receta = recipe(default ~ .,
data = data_train)
modelo = decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
grid_tree = expand_grid(cost_complexity = seq(-10,-1,by=1),
tree_depth=c(1,2,3,4),
min_n = c(20,30,40))
cores = detectCores()
workflow_tree_tune = workflow() %>%
add_model(modelo) %>%
add_recipe(receta)
cl <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
cv_tree = workflow_tree_tune %>%
tune_grid(data_folds,
grid = grid_tree,
metrics = metric_set(roc_auc))
parallel::stopCluster(cl)
library(rpart)
library(rpart.plot)
best_tree = cv_tree %>% select_best("roc_auc")
best_tree
final_tree = workflow_tree_tune %>% finalize_workflow(best_tree)
final_tree
tree_fit = final_tree %>% fit(data = data_train)
tree_fit
prediccion_test = predict(tree_fit, new_data = data_test)
prediccion_test
data_test$pred = as.factor(prediccion_test$.pred_class)
conf_mat(data_test, truth = default, estimate = pred)
4440 + 845
845 / (4440 + 845)
matriz_confusion
matriz_confusion = conf_mat(data_test, truth = default, estimate = pred)
summary(matriz_confusion)
summary(matriz_confusion)
arbol_grafico = tree_fit %>% extract_fit_engine()
rpart.plot(arbol_grafico)
help(rpart.plot)
rpart.plot(arbol_grafico, type = 1)
rpart.plot(arbol_grafico, type = 2)
rpart.plot(arbol_grafico, type = 3)
rpart.plot(arbol_grafico, type = 4)
rpart.plot(arbol_grafico, type = 5)
